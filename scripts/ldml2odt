#!/usr/bin/python

import sys, os
import argparse, codecs
import lxml.etree as et
try:
    from oxttools.xmltemplate import Templater
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))
    from oxttools.xmltemplate import Templater

parser = argparse.ArgumentParser()
parser.add_argument('infile',help='xml file to process')
parser.add_argument('outfile',help='Ouptut file to generate')
parser.add_argument('-t','--template',help='Template file to generate from')
parser.add_argument('-l','--langtag',required=True,help='Maximal Langtag for this data')
args = parser.parse_args()
t = Templater()
t.define('resdir', os.path.abspath(os.path.join(os.path.dirname(__file__), "../lib/oxttools/data")))

if args.langtag is not None:
    try:
        from sldr.langtags import LangTag
    except ImportError:
        sys.path.append(os.path.join(os.path.dirname(__file__), '../../sldr/sldr/python/lib'))
        from sldr.langtags import LangTag
    ltag = LangTag(args.langtag)
    t.define('lang', ltag.lang)
    t.define('script', ltag.script)
    t.define('lscript', ltag.script.lower())
    t.define('region', ltag.region)

t.parse(args.template)
oldd = et.parse(args.infile).getroot()
nsmap = oldd.nsmap
nsmap['sil'] = 'urn://www.sil.org/ldml/0.1'
d = et.Element(oldd.tag, nsmap=nsmap)
d[:] = oldd[:]
if args.template.endswith('.fodt'):
    t.processodt(context=d)
else:
    t.process(context = d)
with codecs.open(args.outfile, "w", encoding="utf-8") as of :
    of.write("<?xml version='1.0'?>\n")
    of.write(unicode(t))


